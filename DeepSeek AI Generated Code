# main.py
import os
import json
import random
import re
import nextcord
import requests
from nextcord.ext import commands
from dotenv import load_dotenv
from nextcord.ui import View, Button, Modal, TextInput
from nextcord import Interaction, TextInputStyle, ButtonStyle

load_dotenv()
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

intents = nextcord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

characters = {}
party_members = []
current_turn = 0
status_effects = {}
player_stats = {}

def roll_formula(formula):
    match = re.match(r"(\d+)d(\d+)([+-]\d+)?", formula)
    if not match:
        return 0
    num_dice = int(match[1])
    die_size = int(match[2])
    modifier = int(match[3]) if match[3] else 0
    rolls = [random.randint(1, die_size) for _ in range(num_dice)]
    return sum(rolls) + modifier

class CreateCharModal(Modal):
    def __init__(self):
        super().__init__("Create Your Character")
        self.name = TextInput(label="Name")
        self.race = TextInput(label="Race")
        self.char_class = TextInput(label="Class")
        self.personality = TextInput(label="Personality", style=TextInputStyle.paragraph)
        self.inventory = TextInput(label="Initial Inventory", style=TextInputStyle.multiline, required=False)
        self.skills = TextInput(label="Initial Skills", style=TextInputStyle.multiline, required=False)

        self.add_item(self.name)
        self.add_item(self.race)
        self.add_item(self.char_class)
        self.add_item(self.inventory)
        self.add_item(self.skills)
        self.add_item(self.personality)

    async def callback(self, interaction: Interaction):
        user_id = str(interaction.user.id)
        inventory = self.inventory.value.split('\n') if self.inventory.value else []
        skills = [line.strip() for line in self.skills.value.split('\n') if line.strip()]
        
        characters[user_id] = {
            "name": self.name.value,
            "race": self.race.value,
            "class": self.char_class.value,
            "stats": {
                "strength": 10,
                "dexterity": 10,
                "intelligence": 10
            },
            "passives": [],
            "personality": self.personality.value,
            "inventory": inventory,
            "skills": skills
        }
        await interaction.response.send_message(f"✅ Character `{self.name.value}` created!", ephemeral=True)

        log_channel = nextcord.utils.get(interaction.guild.text_channels, name="logs")
        if log_channel:
            items = ', '.join(repr(i) for i in inventory)
            skills_str = ', '.join(skills)
            await log_channel.send(
                "[CHARACTER LOG]\n"
                f"UserID: {user_id}\n"
                f"Name: {self.name.value}\n"
                f"Race: {self.race.value}\n"
                f"Class: {self.char_class.value}\n"
                f"Stats: {json.dumps(characters[user_id]['stats'])}\n"
                f"Passives: {json.dumps(characters[user_id]['passives'])}\n"
                f"Personality: {self.personality.value}\n"
                f"Initial Inventory: {items or 'None'}\n"
                f"Initial Skills: {skills_str or 'None'}"
            )

class CreateCharButton(View):
    def __init__(self):
        super().__init__()

    @nextcord.ui.button(label="Create Character", style=ButtonStyle.primary)
    async def create_callback(self, button: Button, interaction: Interaction):
        await interaction.response.send_modal(CreateCharModal())

@bot.command()
async def deletechar(ctx):
    user_id = str(ctx.author.id)
    if user_id in characters:
        del characters[user_id]
        await ctx.send(f"🗑️ Your character has been deleted, {ctx.author.display_name}.")
    else:
        await ctx.send("❌ You don’t have a character to delete.")

@bot.command()
async def charui(ctx):
    await ctx.send("Click below to create your character:", view=CreateCharButton())

@bot.command()
async def createchar(ctx, name: str, race: str, char_class: str):
    user_id = str(ctx.author.id)
    inventory = ctx.options.get('inventory', []) if ctx else []
    skills = ctx.options.get('skills', []) if ctx else []
    
    characters[user_id] = {
        "name": name,
        "race": race,
        "class": char_class,
        "stats": {
            "strength": 10,
            "dexterity": 10,
            "intelligence": 10
        },
        "passives": [],
        "personality": "",
        "inventory": inventory,
        "skills": skills
    }
    await ctx.send(
        f"Character created for {ctx.author.display_name}:\n"
        f"Name: `{name}`\n"
        f"Race: `{race}`\n"
        f"Class: `{char_class}`\n"
        f"Initial Inventory: {', '.join(inventory) if inventory else 'None'}\n"
        f"Initial Skills: {', '.join(skills) if skills else 'None'}"
    )

@bot.command()
async def mychar(ctx):
    user_id = str(ctx.author.id)
    char = characters.get(user_id)

    if char:
        stats = char['stats']
        inventory_text = ', '.join(char['inventory']) if char['inventory'] else 'None'
        skills_text = ', '.join(char['skills']) if char['skills'] else 'None'
        await ctx.send(
            f"{ctx.author.display_name}'s Character:\n"
            f"Name: `{char['name']}`\n"
            f"Race: `{char['race']}`\n"
            f"Class: `{char['class']}`\n"
            f"Stats: {json.dumps(stats)}\n"
            f"Passives: {', '.join(char['passives']) if char['passives'] else 'None'}\n"
            f"Personality: {char.get('personality', '')}\n"
            f"Inventory: {inventory_text}\n"
            f"Skills: {skills_text}"
        )
    else:
        await ctx.send("❌ You haven’t created a character yet. Use `!createchar` or `!charui` to begin.")

@bot.command()
async def startparty(ctx, *members):
    global party_members, current_turn
    party_members = list(members)
    current_turn = 0
    if party_members:
        emoji = nextcord.Embed(
            title="🎮 Party Started", 
            description=f"Party order set: {', '.join(party_members)}\n➡️ It's **{party_members[0]}'s** turn!",
            color=0x00ff00
        )
        await ctx.send(embed=emoji)
    else:
        await ctx.send("You must specify at least one party member.")

@bot.command()
async def nextturn(ctx):
    global current_turn
    if not party_members:
        await ctx.send("No party members set. Use `!startparty` first.")
        return
    
    # Notify previous player it's not their turn anymore
    if len(party_members) > 1 and current_turn - 1 >= 0:
        previous_player = party_members[current_turn - 1]
        await ctx.send(f"⏭️ {previous_player}'s turn has ended and it's now **{party_members[current_turn]}'s** turn!")
    else:
        await ctx.send(f"⏭️ It's now **{party_members[current_turn]}'s** turn!")

    current_turn = (current_turn + 1) % len(party_members)

@bot.command()
async def addmember(ctx, member: str):
    global party_members
    party_members.append(member)
    await ctx.send(f"Added {member} to the party. Current order: {', '.join(party_members)}")

@bot.command()
async def endparty(ctx):
    global party_members, current_turn
    party_members = []
    current_turn = 0
    await ctx.send("❌ Party turn tracking ended.")

@bot.command()
async def resetscenario(ctx):
    """Reset the current scenario"""
    global party_members, current_turn
    party_members = []
    current_turn = 0
    await ctx.send("🔄 Scenario has been reset.")

@bot.command()
async def askdm(ctx, *, prompt: str):
    user_id = str(ctx.author.id)
    d20_bonus = 0
    char = characters.get(user_id)

    # Get roll result
    roll_result = roll_formula(f"2d6+{d20_bonus}")
    
    # Classify based on roll
    if roll_result <= 10:
        judgment = "negative"
        feedback = "⚠️ - Your action didn't quite go as planned."
    elif 11 <= roll_result <= 17:
        judgment = "average"
        feedback = "🤔 - Your action has mixed results."
    else:  # roll_result >= 18
        judgment = "positive"
        feedback = "✨ - Your action resulted in great success!"

    # Log the prompt and create an embed for the response
    log_channel = nextcord.utils.get(ctx.guild.text_channels, name="logs")
    quest_id = 1
    memory_messages = []

    if log_channel:
        async for msg in log_channel.history(limit=50, oldest_first=True):
            if msg.author == bot.user and "**DM Reply:**" in msg.content:
                try:
                    quest_line = int(msg.content.split("Quest ID: #")[1].split("\n")[0])
                    if quest_line >= quest_id:
                        quest_id = quest_line + 1
                    user_input = msg.content.split("Prompt:** ")[1].split("\n**DM Reply:**")[0]
                    bot_reply = msg.content.split("**DM Reply:** ")[1]
                    memory_messages.append({"role": "user", "content": user_input})
                    memory_messages.append({"role": "assistant", "content": bot_reply})
                except Exception:
                    continue

    # Character description for the AI
    if char and char.get("personality"):
        char_desc = f"You are {char['name']}, a {char['race']} {char['class']} with a {char['personality']} personality."
    else:
        char_desc = "You are an unnamed adventurer."
    
    # Add judgment in the prompt
    enhanced_prompt = f"{char_desc} {prompt} (Roll: {roll_result}, Judgment: {judgment})"

    messages = [
        {"role": "system", "content": "You are a DM for a DnD game. Respond to player prompts with vivid, descriptive responses. Include sensory details and roleplay your world."}
    ] + memory_messages + [
        {"role": "user", "content": enhanced_prompt}
    ]

    payload = {
        "model": "mistralai/mistral-7b-instruct",
        "messages": messages,
        "temperature": 0.7
    }

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    try:
        res = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=payload)
        data = res.json()
        reply = data['choices'][0]['message']['content'].strip()
        
        # Send response with emoji based on roll
        if roll_result <= 10:
            await ctx.send(f"{feedback}\n**DM Reply:** {reply}")
        elif 11 <= roll_result <= 17:
            await ctx.send(f"{feedback}\n**DM Reply:** {reply}")
        else:
            await ctx.send(f"{feedback}\n**DM Reply:** {reply}")

        timestamp = datetime.now().strftime("%B %d, %Y – %I:%M %p")
        if log_channel:
            prompt_text = prompt[:100] + '...' if len(prompt) > 100 else prompt
            await log_channel.send(
                f"Quest ID: #{quest_id}\n"
                f"Timestamp: {timestamp}\n"
                f"Prompt:** {prompt_text}\n"
                f"Roll: {roll_result}\n"
                f"Judgment: {judgment}\n"
                f"**DM Reply:** {reply}"
            )

    except Exception as e:
        await ctx.send(f"❌ Bot error: {str(e)}")

@bot.command()
async def helpme(ctx):
    await ctx.send(
        "**Rift DM Bot Commands:**\n"
        "`!createchar <name> <race> <class>` - Create your character\n"
        "`!deletechar` - Delete your character\n"
        "`!mychar` - View your character\n"
        "`!charui` - Create a character using buttons\n"
        "`!startparty <name1> [name2]...` - Start a turn-based party\n"
        "`!nextturn` - Progress to next turn\n"
        "`!addmember <name>` - Add a new member to party\n"
        "`!endparty` - End party session\n"
        "`!resetscenario` - Reset the current scenario\n"
        "`!askdm <prompt>` - Ask the Dungeon Master\n"
        "`!helpme` - Show this help message\n"
        "Use the buttons that appear during party sessions for UI control."
    )

# AI skill validation would typically be implemented in a command system
@bot.command()
async def ai_skill_check(ctx):
    """Example of AI skill validation system (to be integrated with your commands)"""
    # This would check what skills a player has and determine if an action is possible
    await ctx.send("This command would validate skill usage based on player character capabilities.")

bot.run(DISCORD_TOKEN)
